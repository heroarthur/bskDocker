︠03be558a-55a6-459e-b933-86f13eb2ba59︠
p = random_prime(2^512)
q = random_prime(2^512)
#n = p * q # 1024-bit modulus
n = 20734601011924435778622626352029859267407020070459948494552124371885551349803628688810359950660469611598599270653643020199849673645957114359068856671579941583787010742883379752422179790775854722285250574171017314543776132627340992715862463976226157198802724737916167351743031092170694732212079270288260116920347005873441934844331366977833414936053188083278692048655806492237086833973593048029971953858708564756986112746264342160128533820139843707887554443829740749341457682129448431307376277626946193349841459871135143174332865644871124709386593795444594176571398306854978531773059317408297544411480754278445963594097


c1 = 5798342699265206934420973859705845742351703089729060134567328254330615784365995736338244858389141097056860897925415533524132485219309677211536454121980013277489411595097229359060048610709651629484274180139641949236030911293253225176587614589052036709493016063417267999362321772940154570879098057314077718308045822909869484990394647774839724686071434607101679452077529101384531867718475838794159366249401094704197187928324309091725341123064364006215090338742671803974672336309794812555009094880294379163950771396611383829548438389011806035316604007631200606295037571624314741313467025832903948886543738372526576588100
c2 = 6324513811966659241694789104678009863472076203598306369514046336538444763189528576194126264402321531857630690978560680110403119602085911610887052475561764483213501105915891824298229493089969810035969986223562203509908446427352044424543702525916262989780595687723381268388015336660028049139272473971861295245739150793423507176051909061175681278779394854564601117656605522294267497647521312552373263929256657563270557840070031033022537711986292584144545764897132641347331696151107555537513330227692738096151604026896168537794960806921134682405822631841360773952605614157635507592354322329165101801328393621111769763763




R.<X> = Zmod(n)[]
f1 = X^3 - c1
f2 = (X + r)^3 - c2

# GCD is not implemented for rings over composite modulus in Sage
# so we'll do it ourselves. Might fail in rare cases, but we
# don't care.
def my_gcd(a, b): 
    return a.monic() if b == 0 else my_gcd(b, a % b)

#print m

print - my_gcd(f1, f2).coefficients()[0] # coefficient 0 = -m
︡ca04787d-5855-4d36-a204-a02fa433a22e︡{"stdout":"60227899741010421167102064237746719187038227796037018130100181999856608335876072180550775777299061551549188630451048282871062761224039870674391108946724671276478372574393249570423223972549552885273990407024258248267755004190362404435088949910594032476532224496366475935937207279623007014734666916609137846436131811695859938336075432583425734368338456827897600872401714219469694927799077160070415379935807\n"}︡{"done":true}︡










